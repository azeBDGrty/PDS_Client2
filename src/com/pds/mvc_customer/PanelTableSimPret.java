/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pds.mvc_customer;

import com.pds.entities.Client;
import com.pds.entities.MathHepler;
import com.pds.entities.SimulationPret;
import com.pds.graphics.PanelGraphInfoSim;
import com.pds.implobs.AbstractObservable;
import java.sql.Timestamp;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.ComboBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zouhairhajji
 */
public class PanelTableSimPret extends javax.swing.JInternalFrame implements com.pds.implobs.IObserver {

    private Client client;
    private List<SimulationPret> listSimPretConcerned;
    private Controller_GestClient controller;
    
    /**
     * @param _1 coefmensualite
     * @param _2 coefDuree
     * @param _3 coefTauxInteret
     * @param _4 coefMtTotal
     * @param _5 coefTypePret
     * @param _6 coefTauxEndettement
     * @param _7 coefDateFin
     */
    private int coefs[];
    private int selectedIndex;
    
    
    
    PanelTableSimPret(Controller_GestClient controller) {
        this.controller = controller;
        this.coefs = new int[]{7, 6, 5, 4, 3, 2, 1};
        this.selectedIndex = -1;
        initComponents();
        remplirComboboxCoef(-5, 10, cMensualite, coefs[0]);
        remplirComboboxCoef(-5, 10, cDuree, coefs[1]);
        remplirComboboxCoef(-5, 10, cTauxInter, coefs[2]);
        remplirComboboxCoef(-5, 10, cMt, coefs[3]);
        remplirComboboxCoef(-5, 10, cTauxFixe, coefs[4]);
        remplirComboboxCoef(-5, 10, cTauxEndettement, coefs[5]);
        remplirComboboxCoef(-5, 10, cDateFin, coefs[6]);
        
        //this.afficherSimulation.setEnabled(false);
        //this.jTable1.getSelectionModel().addListSelectionListener(new TableSelecterListener());
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        afficherSimulation = new javax.swing.JButton();
        panelGraph = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cMensualite = new javax.swing.JComboBox<>();
        cDuree = new javax.swing.JComboBox<>();
        cTauxInter = new javax.swing.JComboBox<>();
        cMt = new javax.swing.JComboBox<>();
        cTauxFixe = new javax.swing.JComboBox<>();
        cTauxEndettement = new javax.swing.JComboBox<>();
        cDateFin = new javax.swing.JComboBox<>();
        afficherSimulation1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jTable1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {
                    ""

                }},
                new String [] {
                    "Identifiant de la simulation", "Mensualité", "Durée", "Taux d'interet", "Montant totale", "Type de prêt", "Taux d'endettement", "Date fin du contrat", "Resultat", "Position"
                }
            ));
            jScrollPane1.setViewportView(jTable1);

            jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
            jLabel1.setText("Le tri intéligent des simulations");

            afficherSimulation.setText("Modifier les coefficients et retrier");
            afficherSimulation.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    afficherSimulationActionPerformed(evt);
                }
            });

            panelGraph.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

            javax.swing.GroupLayout panelGraphLayout = new javax.swing.GroupLayout(panelGraph);
            panelGraph.setLayout(panelGraphLayout);
            panelGraphLayout.setHorizontalGroup(
                panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 1006, Short.MAX_VALUE)
            );
            panelGraphLayout.setVerticalGroup(
                panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 260, Short.MAX_VALUE)
            );

            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "les coefficients"));

            jLabel2.setText("coef : Mensualité ");

            jLabel3.setText("coef : Durée ");

            jLabel4.setText("coef : Taux d'interet ");

            jLabel5.setText("coef : Montant total  ");

            jLabel6.setText("coef : Taux fixe ");

            jLabel7.setText("coef : Taux d'endettement ");

            jLabel8.setText("coef : Date fin");
            jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jLabel8MouseClicked(evt);
                }
            });
            jLabel8.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    jLabel8KeyPressed(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cMensualite, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cDuree, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cTauxInter, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cTauxFixe, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cTauxEndettement, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cDateFin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(cMt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel6)
                        .addComponent(cMensualite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cTauxFixe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel7)
                        .addComponent(cDuree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cTauxEndettement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel8)
                        .addComponent(cTauxInter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(cMt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            afficherSimulation1.setText("Modifier les coefficients et retrier");
            afficherSimulation1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    afficherSimulation1ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(266, 266, 266)
                                    .addComponent(jLabel1))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(60, 60, 60)
                                    .addComponent(panelGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(121, 121, 121)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(afficherSimulation1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(afficherSimulation))
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(0, 76, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(22, 22, 22)
                    .addComponent(jLabel1)
                    .addGap(32, 32, 32)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(panelGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(afficherSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(afficherSimulation1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(20, 20, 20))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents
    
    
    /**
     * @param _1 coefmensualite
     * @param _2 coefDuree
     * @param _3 coefTauxInteret
     * @param _4 coefMtTotal
     * @param _5 coefTypePret
     * @param _6 coefTauxEndettement
     * @param _7 coefDateFin
     */
    private void afficherSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficherSimulationActionPerformed
        this.coefs[0] = Integer.parseInt(cMensualite.getSelectedItem().toString());
        this.coefs[1] = Integer.parseInt(cDuree.getSelectedItem().toString());
        this.coefs[2] = Integer.parseInt(cTauxInter.getSelectedItem().toString());
        this.coefs[3] = Integer.parseInt(cMt.getSelectedItem().toString());
        this.coefs[4] = Integer.parseInt(cTauxFixe.getSelectedItem().toString());
        this.coefs[5] = Integer.parseInt(cTauxEndettement.getSelectedItem().toString());
        this.coefs[6] = Integer.parseInt(cDateFin.getSelectedItem().toString());
        try {
            chargerSimulations(client, listSimPretConcerned);
            
        } catch (CloneNotSupportedException ex) {
            JOptionPane.showMessageDialog(this, "L'opération s'est déroulé avec un echec");
        }
    }//GEN-LAST:event_afficherSimulationActionPerformed

    private void afficherSimulation1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afficherSimulation1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_afficherSimulation1ActionPerformed

    private void jLabel8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel8KeyPressed
        
    }//GEN-LAST:event_jLabel8KeyPressed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        JOptionPane.showMessageDialog(this, "si le client est sensible à la date de fin, ca veut dire qu'il préfere que la date fin soit prolongée, il faut augmenter le coefficient, sinon il faut le diminuer (valeur négative si )");
    }//GEN-LAST:event_jLabel8MouseClicked


    
    void chargerSimulations(Client client, List<SimulationPret> listSimPret) throws CloneNotSupportedException {
        this.client = client;
        this.listSimPretConcerned = listSimPret;
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);
        /*
        listSimPret.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToWithTauxEndet(client, e1, e2, true)
                                //Double.compare(
                                //e1.getTauxEndettement(client), e2.getTauxEndettement(client))
                )
                .forEach(e -> listSimPretConcerned.add(e));
        */
        
        int pMensualite = -1;
        int pDuree = -1;
        int pTauxInteret = -1;
        int pMtTotal = -1;
        int pTypePret = -1;
        int pTauxEndettement = -1;
        int pDateFin = -1;
        double resultat = -1;
        int position = 0;
        
        List<Object[]> dataSimulations = new LinkedList<>();
        for(int i = 0; i<listSimPret.size() ;i++){         
            pMensualite = getPosMensualite(listSimPret, listSimPret.get(i));
            pDuree = getPosDuree(listSimPret, listSimPret.get(i));
            pTauxInteret = getPosTauxInteret(listSimPret, listSimPret.get(i));
            pMtTotal = getPosMensualite(listSimPret, listSimPret.get(i)) ;
            pTypePret = getPosTypePret(listSimPret, listSimPret.get(i)) ;
            pTauxEndettement = getPosTauxEndett(listSimPret, listSimPret.get(i)); 
            pDateFin = getPosDateFin(listSimPret, listSimPret.get(i)); 
            resultat =   getResultat(pMensualite, pDuree, pTauxInteret, pMtTotal, pTypePret, pTauxEndettement, pDateFin);
            
            Object[] objects = new Object[]{
                "Idenfiant :"+listSimPret.get(i).getIdSimPret(),
                MathHepler.ajustVirgule(listSimPret.get(i).getMensualite(), 2)+ " €",
                listSimPret.get(i).getDureePret()+ " mois",
                MathHepler.ajustVirgule(listSimPret.get(i).getTauxInteret(), 2)+" %",
                MathHepler.ajustVirgule(listSimPret.get(i).getMensualite()*listSimPret.get(i).getDureePret(), 2)+ " €",
                listSimPret.get(i).getTypePret().getAbv(),
                MathHepler.ajustVirgule(listSimPret.get(i).getTauxEndettement(client)*100, 2)+" %",
                MathHepler.addMouthToDate(listSimPret.get(i).getDateContraction(), listSimPret.get(i).getDureePret()),
                Math.abs(resultat), 
                -1
            };
            dataSimulations.add(objects); 
        }
        
        Collections.sort(dataSimulations, new Comparator<Object[]>(){
            @Override
            public int compare(Object[] o1, Object[] o2) {
                return MathHepler.compareToResSimulation(o1, o2, true);
            }
        });
        
        for(int i = 0; i<dataSimulations.size() ;i++){
            dataSimulations.get(i)[7] = MathHepler.formatTimeStamp((Timestamp)dataSimulations.get(i)[7], "dd-MM-yyyy");
            dataSimulations.get(i)[9] = (i+1);
            tableModel.addRow(dataSimulations.get(i));
        }
        
        
        
        /*
        Object[] objects = new Object[]{
                "Idenfiant :"+simulation.getIdSimPret(),
                MathHepler.ajustVirgule(simulation.getMensualite(), 2)+ " €",
                simulation.getDureePret()+ " mois",
                MathHepler.ajustVirgule(simulation.getTauxInteret(), 2)+" %",
                MathHepler.ajustVirgule(simulation.getMensualite()*simulation.getDureePret(), 2)+ " €",
                simulation.getTypePret().getAbv(),
                MathHepler.ajustVirgule(simulation.getTauxEndettement(client)*100, 2)+" %",
                MathHepler.ajustVirgule(resultat, 2)+" points"
            };
            tableModel.addRow(objects);
         */
        
        PanelGraphInfoSim view = new PanelGraphInfoSim("A", "", listSimPret, client);
        view.getChartPanel().setBounds(0, 0, panelGraph.getWidth(), panelGraph.getHeight());
        this.panelGraph.add(view.getChartPanel());
        
        
        this.repaint();
        this.validate();
        JOptionPane.showMessageDialog(this, "Le tri s'est déroulé avec un succée");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton afficherSimulation;
    private javax.swing.JButton afficherSimulation1;
    private javax.swing.JComboBox<String> cDateFin;
    private javax.swing.JComboBox<String> cDuree;
    private javax.swing.JComboBox<String> cMensualite;
    private javax.swing.JComboBox<String> cMt;
    private javax.swing.JComboBox<String> cTauxEndettement;
    private javax.swing.JComboBox<String> cTauxFixe;
    private javax.swing.JComboBox<String> cTauxInter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panelGraph;
    // End of variables declaration//GEN-END:variables

    
    public  double getResultat(double pMensualite, double pDuree, double pTauxInteret, double pMtTotal, double pTypePret, double pTauxEndettement, double pDateFin){
        return (pMensualite * coefs[0] + pDuree* coefs[1] + pTauxInteret* coefs[2] + pMtTotal* coefs[3] + pTypePret* coefs[4]+ pTauxEndettement* coefs[5]+ pDateFin* coefs[6]);
    }
    
    
    
    public int getPosMensualite(List<SimulationPret> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<SimulationPret> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToWithMensualite(e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    
    public int getPosDuree(List<SimulationPret> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<SimulationPret> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToWithDuree(e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    
    public int getPosTauxInteret(List<SimulationPret> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<SimulationPret> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToInteret(e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    
    public int getPosMtTotal(List<SimulationPret> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<SimulationPret> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToMtTotale(e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    
    public int getPosTypePret(List<SimulationPret> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<SimulationPret> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToTypePret(e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    
    public int getPosTauxEndett(List<SimulationPret> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<SimulationPret> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToWithTauxEndet(client, e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    public int getPosResSimPret (List<Object[]> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<Object[]> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToResSimulation( e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    public int getPosDateFin(List<SimulationPret> listSimulation, SimulationPret simulationConcerned){
        int position = 1;
        List<SimulationPret> simulations = new LinkedList<>();
        
        listSimulation.stream()
                .sorted(
                        (e1, e2) -> MathHepler.compareToDateFin( e1, e2, false)
                ).forEach(e -> simulations.add(e));
        
        return simulations.indexOf(simulationConcerned);
    }
    
    @Override
    public boolean update(AbstractObservable sender, String message, Object... data) {
        return true;
    }

    
    
    
    
    
    public class TableSelecterListener implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            /*
            if (!e.getValueIsAdjusting()) {
                if (!((ListSelectionModel) e.getSource()).isSelectionEmpty()) {
                    selectedIndex = ((ListSelectionModel) e.getSource()).getMinSelectionIndex();
                    afficherSimulation.setEnabled(true);
                }else{
                    selectedIndex = -1;
                    afficherSimulation.setEnabled(false);
                }   
            }
            */
        }
    }
    
    public void remplirComboboxCoef(int min, int max, JComboBox combo, int indexToSelect){
        for(int i = min; i<max+1; i++){
            combo.addItem(i);
        }
        combo.setSelectedIndex((max-min*-1)+indexToSelect);
    }
          
}
